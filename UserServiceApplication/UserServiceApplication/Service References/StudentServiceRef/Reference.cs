//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserService.StudentServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StudentInfo", Namespace="http://schemas.datacontract.org/2004/07/StudentServiceApplication")]
    [System.SerializableAttribute()]
    public partial class StudentInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProgramCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessfulOperationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> UnionExpirationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProgramCode {
            get {
                return this.ProgramCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProgramCodeField, value) != true)) {
                    this.ProgramCodeField = value;
                    this.RaisePropertyChanged("ProgramCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SuccessfulOperation {
            get {
                return this.SuccessfulOperationField;
            }
            set {
                if ((this.SuccessfulOperationField.Equals(value) != true)) {
                    this.SuccessfulOperationField = value;
                    this.RaisePropertyChanged("SuccessfulOperation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UnionExpiration {
            get {
                return this.UnionExpirationField;
            }
            set {
                if ((this.UnionExpirationField.Equals(value) != true)) {
                    this.UnionExpirationField = value;
                    this.RaisePropertyChanged("UnionExpiration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnionName {
            get {
                return this.UnionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UnionNameField, value) != true)) {
                    this.UnionNameField = value;
                    this.RaisePropertyChanged("UnionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StudentServiceRef.IStudentService")]
    public interface IStudentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/CreateStudent", ReplyAction="http://tempuri.org/IStudentService/CreateStudentResponse")]
        UserService.StudentServiceRef.StudentInfo CreateStudent(UserService.StudentServiceRef.StudentInfo student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/CreateStudent", ReplyAction="http://tempuri.org/IStudentService/CreateStudentResponse")]
        System.Threading.Tasks.Task<UserService.StudentServiceRef.StudentInfo> CreateStudentAsync(UserService.StudentServiceRef.StudentInfo student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetStudentByUserId", ReplyAction="http://tempuri.org/IStudentService/GetStudentByUserIdResponse")]
        UserService.StudentServiceRef.StudentInfo GetStudentByUserId(int user_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetStudentByUserId", ReplyAction="http://tempuri.org/IStudentService/GetStudentByUserIdResponse")]
        System.Threading.Tasks.Task<UserService.StudentServiceRef.StudentInfo> GetStudentByUserIdAsync(int user_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllStudents", ReplyAction="http://tempuri.org/IStudentService/GetAllStudentsResponse")]
        UserService.StudentServiceRef.StudentInfo[] GetAllStudents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/GetAllStudents", ReplyAction="http://tempuri.org/IStudentService/GetAllStudentsResponse")]
        System.Threading.Tasks.Task<UserService.StudentServiceRef.StudentInfo[]> GetAllStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/DeleteStudent", ReplyAction="http://tempuri.org/IStudentService/DeleteStudentResponse")]
        bool DeleteStudent(System.Nullable<int> student_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/DeleteStudent", ReplyAction="http://tempuri.org/IStudentService/DeleteStudentResponse")]
        System.Threading.Tasks.Task<bool> DeleteStudentAsync(System.Nullable<int> student_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/UpdateStudent", ReplyAction="http://tempuri.org/IStudentService/UpdateStudentResponse")]
        UserService.StudentServiceRef.StudentInfo UpdateStudent(UserService.StudentServiceRef.StudentInfo updatedStudent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/UpdateStudent", ReplyAction="http://tempuri.org/IStudentService/UpdateStudentResponse")]
        System.Threading.Tasks.Task<UserService.StudentServiceRef.StudentInfo> UpdateStudentAsync(UserService.StudentServiceRef.StudentInfo updatedStudent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/IsRunning", ReplyAction="http://tempuri.org/IStudentService/IsRunningResponse")]
        bool IsRunning();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudentService/IsRunning", ReplyAction="http://tempuri.org/IStudentService/IsRunningResponse")]
        System.Threading.Tasks.Task<bool> IsRunningAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStudentServiceChannel : UserService.StudentServiceRef.IStudentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StudentServiceClient : System.ServiceModel.ClientBase<UserService.StudentServiceRef.IStudentService>, UserService.StudentServiceRef.IStudentService {
        
        public StudentServiceClient() {
        }
        
        public StudentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StudentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StudentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StudentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public UserService.StudentServiceRef.StudentInfo CreateStudent(UserService.StudentServiceRef.StudentInfo student) {
            return base.Channel.CreateStudent(student);
        }
        
        public System.Threading.Tasks.Task<UserService.StudentServiceRef.StudentInfo> CreateStudentAsync(UserService.StudentServiceRef.StudentInfo student) {
            return base.Channel.CreateStudentAsync(student);
        }
        
        public UserService.StudentServiceRef.StudentInfo GetStudentByUserId(int user_Id) {
            return base.Channel.GetStudentByUserId(user_Id);
        }
        
        public System.Threading.Tasks.Task<UserService.StudentServiceRef.StudentInfo> GetStudentByUserIdAsync(int user_Id) {
            return base.Channel.GetStudentByUserIdAsync(user_Id);
        }
        
        public UserService.StudentServiceRef.StudentInfo[] GetAllStudents() {
            return base.Channel.GetAllStudents();
        }
        
        public System.Threading.Tasks.Task<UserService.StudentServiceRef.StudentInfo[]> GetAllStudentsAsync() {
            return base.Channel.GetAllStudentsAsync();
        }
        
        public bool DeleteStudent(System.Nullable<int> student_Id) {
            return base.Channel.DeleteStudent(student_Id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteStudentAsync(System.Nullable<int> student_Id) {
            return base.Channel.DeleteStudentAsync(student_Id);
        }
        
        public UserService.StudentServiceRef.StudentInfo UpdateStudent(UserService.StudentServiceRef.StudentInfo updatedStudent) {
            return base.Channel.UpdateStudent(updatedStudent);
        }
        
        public System.Threading.Tasks.Task<UserService.StudentServiceRef.StudentInfo> UpdateStudentAsync(UserService.StudentServiceRef.StudentInfo updatedStudent) {
            return base.Channel.UpdateStudentAsync(updatedStudent);
        }
        
        public bool IsRunning() {
            return base.Channel.IsRunning();
        }
        
        public System.Threading.Tasks.Task<bool> IsRunningAsync() {
            return base.Channel.IsRunningAsync();
        }
    }
}
